/*!
 * Copyright 2012 Sakai Foundation (SF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://www.osedu.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('underscore');
var fs = require('fs');

var IO = require('./io');
var log = require('oae-logger').logger('oae.api elements');

// Variable that will be used to cache the available UI API Elements
var cachedAvailableUIAPIElements = [];

/**
 * Load all the UI API Elements
 */
var UIAPIElements = module.exports.UIAPIElements = function() {
    loadAvailableUIAPIElements();
};

/**
 * Returns the available UI API Elements from cache
 *
 * @return   {String[]}   Returns an Array of strings representing the names of the available UI API Elements
 */
var getAvailableUIAPIElements = module.exports.getAvailableUIAPIElements = function() {
    return cachedAvailableUIAPIElements;
};
/**
 * Get a list of all of the available UI API Elements and cache them
 */
var loadAvailableUIAPIElements =  module.exports.loadAvailableUIAPIElements = function () {
  IO.getFileListForFolder('../3akai-ux/shared/oae/api', function(elements) {
    var finalelements = [];
    for (var i = 0; i < elements.length; i++) {
      var element = elements[i];
      if (element.substring(0, 7) === 'oae.api' && getNameOfElement(element) !== null) {
        element = getNameOfElement(element);
        finalelements.push(element);
      }   
    }
    cachedAvailableUIAPIElements = finalelements;
  });
}
/**
 * Get a list of all of the available modules, ordered by priority, and cache them
 * 
 * @param   {String[]}   filename   Name of the element that has to be checked
 * @return   {String[]}   Returns the filename of the element, if the file is not an JS file it will return null
 */
var getNameOfElement = function (filename) {
  var extension = getFileExtension(filename);
    if( extension === "js" || extension === "Js" || extension === "JS") {
      filename = filename.slice(8,-3);
      if(filename !== "")
        return filename;
    }
  return null;
};
/**
 * Get a list of all of the available modules, ordered by priority, and cache them
 * 
 * @param   {String[]}   filename   Name of the element that has to be checked
 * @return  {String[]}   Returns the extension of the name
 */
var getFileExtension = function (filename) {
  var ext = /^.+\.([^.]+)$/.exec(filename);
  return ext == null ? "" : ext[1];
};